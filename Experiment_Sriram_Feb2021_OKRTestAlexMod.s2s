'--------------------------------------------------------------------------------
' IMPORT RIG-SPECIFIC PARAMETERS AND UNIVERSAL PARAMETERS
'--------------------------------------------------------------------------------
#include "C:\\Users\\Public\\RaymondLabCode\\Experiment Protocols\\RigChoice.s2s"
#include "C:\\Users\\Public\\RaymondLabCode\\Experiment Protocols\\Parameters_Universal.s2s"


'--------------------------------------------------------------------------------

'--------------------------------------------------------------------------------
var frequencyVector[21];
var frequencyString$;
'--------------------------------------------------------------------------------
' MAIN PROGRAM
'--------------------------------------------------------------------------------


ToolbarConfig();


'--------------------------------------------------------------------------------
' Toolbar Callbacks
'--------------------------------------------------------------------------------
Func ToolbarIdle%()

  ' Check a valid sampling view is running
  var currView := ViewKind();
  if  currView <> 0 then
      return 1;
  endif;

  ' Keep sine wave from drifting
  if MaxTime() > (prevTime + 1/sinHzChair) then
    if driftFix = 1 then
      driftFix%();
    endif;
  endif;


  'If an experiment is running:
  if  runExpmt% = 1 then
      if MaxTime() > goalTime then
          var condition% := stateVector[stage%];
          PrintLog(condition%)
          var stateTime% := timeVector[stage%];
          stage% := stage% + 1;
          goalTime := MaxTime() + stateTime%;
          docase
            case condition% = -1 then
              ToolbarQuitExpmt%();
            case condition% = 0 then
              ToolbarLightOff%();
              Yield();
              ToolbarSineStop%();
            case condition% = 1 then
              if frequencyVector[currFreqIdx%] > 4 then
                docase
                case frequencyVector[currFreqIdx%] = 5 then
                    ToolbarLightOn%(); Yield();
                    SampleKey("t");
                    step_AmpDrum := -10;
                    step_length_corrected := 495;
                    step_rest1 := 495;
                    step_rest2 := 495;
                    step_AmpChair := 0;
                    flashon% := 1;
                    stepOn% := 1;
                    centerDrum := 0;
                    SetSequencerValues();
                case frequencyVector[currFreqIdx%] = 6 then
                    ToolbarLightOn%(); Yield();
                    SampleKey("t");
                    step_AmpDrum := -5;
                    step_length_corrected := 495;
                    step_rest1 := 495;
                    step_rest2 := 495;
                    step_AmpChair := 0;
                    flashon% := 1;
                    stepOn% := 1;
                    centerDrum := 0;
                    SetSequencerValues();
                endcase;
             else
                ToolbarLightOn%(); Yield();
                ToolbarSineStart%(); Yield();
                flashon% := 1;
             endif;
           else
              ToolbarLightOff%();
              Yield();
              ToolbarSineStop%();
              currFreqIdx% := currFreqIdx% + 1;
              sinHzDrum := frequencyVector[currFreqIdx%];
            SetSequencerValues();
          endcase;
        else
          if stage% > 0 then
              if MaxTime() > goalTime - 5 && stage% > 0 && (stateVector[stage%-1] = 0 || stateVector[stage%-1] = -2) then
                runFlash();
                flashon% := 0;
              endif;
          endif;
      endif;
  endif;
  Return(1);
End

'--------------------------------------------------------------------------------
'--------------------------------------------------------------------------------
' Configure expmt settings window
'--------------------------------------------------------------------------------
'--------------------------------------------------------------------------------

Func ToolbarConfigExpmt%()


DlgCreate("Experiment Settings", 0, 0, 50);  'Start new dialog
DlgInteger(1,"Number of tests in frequency block",0,100,0,0,1);
DlgInteger(2, "Length of each test (s)", 0, 5000);
DlgInteger(3, "Time between tests (s)", 0, 5000);
DlgInteger(4, "Time between blocks (s)", 0, 5000);
DlgReal(5, "OKR Amplitude (deg/s)", 0, 5000);
DlgInteger(6, "Number of Drum Frequencies (Hz)", 0, 20);

DlgShow(nTestsPerBlock%, testLength%, interTestTime%, interBlockTime%, sinAmpDrum, numFreqs%);
fillFrequencyVector%();

var i%;
var t%;
var curr% := 0;
for i% := 0 to numFreqs%-1 do
  for t% := 0 to nTestsPerBlock%-1 do
    stateVector[curr%] := 1;
    timeVector[curr%] := testLength%;
    if t% = nTestsPerBlock%-1 then
      stateVector[curr% + 1] := -2;
      timeVector[curr% + 1] := interBlockTime%;
    else
      timeVector[curr% + 1] := interTestTime%;
    endif;
    curr% := curr% + 2;
  next;
next;
stateVector[curr%] := -1;
sinHzDrum := frequencyVector[currFreqIdx%];
sinAmpChair := 0;
SetSequencerValues();
Return(1);
End

Func fillFrequencyVector%()
  DlgCreate("Specify Test Frequencies");  'Start new dialog
  DlgString(1,"Drum Frequencies (Hz - comma separated)", 100);
  DlgShow(frequencyString$);
  ReadStr(frequencyString$, frequencyVector[0:numFreqs%]);
  randomizeFrequencyVector();
  frequencyVector[numFreqs%] := -1;
  PrintLog(frequencyVector);
  Return(1);
End

Proc randomizeFrequencyVector()
  var i%;
  var swapIdx%;
  var tmp;
  for i% := numFreqs%-1 to 0 step -1 do
      swapIdx% := Floor(Rand(i%+1, 0));
      tmp :=frequencyVector[swapIdx%];
      frequencyVector[swapIdx%] := frequencyVector[i%];
      frequencyVector[i%] := tmp;
  next;
End
